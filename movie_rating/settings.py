"""
Django settings for movie_rating project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from dotenv import load_dotenv
from django.core.exceptions import ImproperlyConfigured

import os

ENVIRONMENT = os.getenv('ENVIRONMENT', 'development')

def get_email_setting(name, default=None):
    """Obtiene configuraciones de email con validación segura"""
    value = os.getenv(f'EMAIL_{name}', default)
    
    # Validación solo en producción
    if ENVIRONMENT == 'production' and value in (None, ''):
        raise ImproperlyConfigured(
            f'EMAIL_{name} is required in production environment'
        )
    return value

def get_env_variable(var_name, default=None):
    """Obtiene variables de entorno o devuelve un valor por defecto"""
    try:
        value = os.environ[var_name]
        if not value:
            return default
        return value
    except KeyError:
        if default is not None:
            return default
        raise ImproperlyConfigured(f"La variable de entorno {var_name} es requerida")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
load_dotenv()  # Carga las variables del archivo .env

SECRET_KEY = get_env_variable('SECRET_KEY', 'dummy-key-for-development-only')
if not SECRET_KEY:
    raise ValueError("No SECRET_KEY set for Django application")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = get_env_variable('DEBUG', 'True') == 'True'

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'users', 
    'corsheaders',
    'peliculas',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
]
CORS_ALLOW_CREDENTIALS = True


ROOT_URLCONF = 'movie_rating.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'movie_rating.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres',  
        'USER': 'postgres.bovuleizjnyijvtfaavg',
        'PASSWORD': 'rotten',
        'HOST': 'aws-0-us-east-2.pooler.supabase.com',
        'PORT': '5432',
        'OPTIONS': {
            'sslmode': 'require'  
        }
    }
}



# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = "users.CustomUser"


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

EMAIL_BACKEND = get_email_setting('BACKEND', 'django.core.mail.backends.console.EmailBackend')
EMAIL_HOST = get_email_setting('HOST', '')
EMAIL_PORT = get_email_setting('PORT', '587')
EMAIL_USE_TLS = get_email_setting('USE_TLS', 'True').lower() == 'true'
EMAIL_HOST_USER = get_email_setting('HOST_USER', '')
EMAIL_HOST_PASSWORD = get_email_setting('HOST_PASSWORD', '')

# Validación solo en producción (usando DEBUG y ENVIRONMENT)
IS_PRODUCTION = not DEBUG and os.getenv('ENVIRONMENT') == 'production'

if IS_PRODUCTION and not EMAIL_HOST_PASSWORD:
    raise ValueError(
        "Email password not configured for production. "
        "Set EMAIL_HOST_PASSWORD environment variable."
    )
